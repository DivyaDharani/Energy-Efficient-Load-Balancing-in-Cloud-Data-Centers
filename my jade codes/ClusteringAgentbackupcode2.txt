import jade.core.*;
import jade.core.behaviours.*;
import jade.lang.acl.*;
import java.util.*;
import javax.swing.*;
public class ClusteringAgent extends Agent
{
	int sma = 12;
	int vma = 72;
	public void setup()
	{
		setEnabledO2ACommunication(true,0);
		addBehaviour(new ClusterBehaviour());
	}	

	public class ClusterBehaviour extends OneShotBehaviour //must be cyclic behaviour or TickerBehaviour
	{
		int k = 3,iteration_count= 200;
		int[][] xcluster,ycluster;
		int n;
		int[] x,y;
		int[] incr;
		double[] xcentroid,ycentroid; 
		public void action()
		{
			collectDetails();
			//x = new int[]{1,0,2,3};
			//y = new int[]{0,1,1,3};
			// cluster = new int[k][vma];
			/*xcluster = new int[k][vma];  //change this
			ycluster = new int[k][vma];*/
			incr = new int[k]; //initial values => '0' //increment variable for each Cluster
			xcentroid = new double[k];
			ycentroid = new double[k];
			cluster(x,y,k,iteration_count);
			
		}
		public void cluster(int[] x, int[] y, int k,int iteration_count)
		{
			//k must be less than or equal to the no. of points
			double[] dis = new double[k];
			int i,j,min;
			
			//initial centroids
			for(i=0;i<k;i++)
			{
				xcentroid[i] = x[i];
				ycentroid[i] = y[i];
			}
			for(int iteration=0;iteration<iteration_count;iteration++)
			{
				xcluster = new int[k][vma];
				ycluster = new int[k][vma];
				min = 0;
				for(i=0;i<k;i++)
					incr[i] = 0;
				for(i=0;i<x.length;i++) //point
				{
					for(j=0;j<k;j++) //centroid		
					{
						dis[j] = findDis(x[i],y[i],xcentroid[j],ycentroid[j]); //dis of point i with j centroid
						if(j == 0)
							min = j;
						else
						{
							if(dis[j] < dis[min])
								min = j;
						}
					}
					//put the point in cluster 'min'
					xcluster[min][incr[min]] = x[i];
					ycluster[min][incr[min]] = y[i];
					incr[min]++;
				}

				findCentroid();
			}
			showCluster();
		}
		double findDis(int x1,int y1,double x2,double y2)
		{
			//Euclidean distance
			double a = Math.pow(x2-x1,2);
			double b = Math.pow(y2-y1,2);
			return Math.sqrt(a+b);
		}
		void findCentroid()
		{
			double xtotal = 0, ytotal = 0;
			xcentroid = new double[k];
			ycentroid = new double[k];
			// assuming x and y will be of same length 
			for(int i=0;i<k;i++) //a cluster
			{
				xtotal = 0;
				ytotal = 0;
				for(int j=0;j<incr[i];j++) //an element in cluster
				{
					xtotal += xcluster[i][j];
					ytotal += ycluster[i][j];
				}
				xcentroid[i] = xtotal / incr[i];
				ycentroid[i] = ytotal / incr[i];
				// System.out.println("Centroid "+(i+1)+" => ("+xcentroid[i]+","+ycentroid[i]+")");
			}
		}
		public void showCluster()
		{
			String str="Cluster Information:\n";
			for(int i=0;i<k;i++)
			{
				str+="\nCluster "+(i+1)+":";
				for(int j=0;j<incr[i];j++)
				{
					str+="\t("+xcluster[i][j]+","+ycluster[i][j]+")";
				}
				str += "\tElements: "+incr[i]+"\tCentroid: ("+xcentroid[i]+","+ycentroid[i]+")";
			}
			//JOptionPane.showMessageDialog(null,str);
			System.out.println(str);
			System.out.println();
		}
		void collectDetails()
		{
			ACLMessage msg = new ACLMessage(ACLMessage.REQUEST);
			msg.setOntology("requesting-for-capacity");
			for(int i=1;i<=sma;i++)
			{
				msg.addReceiver(new AID("sma"+i,AID.ISLOCALNAME));
			}
			send(msg);
			System.out.println("requesting-for-capacity message -> from CA to all SMAs");
			int count = 0,i,j,k=0;
			Object obj;
			String[] strarr,vmcaparr;
			x = new int[vma];
			y = new int[vma];	
			while(count < sma)
			{
				//first enable O2A communication to receive O2A object
				while((obj = getO2AObject())==null)
				{
					;
				}
				strarr = (String[])obj;
				for(i=0;i<strarr.length;i++)
				{
					vmcaparr = strarr[i].split(" ");
					x[k] = Integer.parseInt(vmcaparr[0]); //cpu capacity
					y[k++] = Integer.parseInt(vmcaparr[1]); //mem capacity
				}
				count++;
			}
		}
	}
}